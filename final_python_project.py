# -*- coding: utf-8 -*-
"""Final_python_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/108Ha_P1IuiHF0DkcS-WLJh2YJgE38Gl8

# Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""# Importing and Processing Data

"""

my_data = pd.read_csv('airline_passenger_satisfaction.csv')

my_data.info()

rating_columns = [
    'Departure and Arrival Time Convenience',
    'Ease of Online Booking',
    'Check-in Service',
    'Online Boarding',
    'Gate Location',
    'On-board Service',
    'Seat Comfort',
    'Leg Room Service',
    'Cleanliness',
    'Food and Drink',
    'In-flight Service',
    'In-flight Wifi Service',
    'In-flight Entertainment',
    'Baggage Handling'
]

# 1. Columns with ratings
rating_data_only = my_data[rating_columns]

# 2. Changed all the 0 to NaN to calculate the average per row. Based on the data_dictionary.csv 0 means there was no rating (not applicable).
rating_data_no_zeros = rating_data_only.replace(0, np.nan)

# 3. Average count for each row (axis=1 – by row)
my_data['Average Excluding Zeros'] = round(rating_data_no_zeros.mean(axis=1), 2)

my_data.loc[:,'Departure and Arrival Time Convenience':'Average Excluding Zeros'].reset_index().head(50)

my_data['count'] = 1

# Miles to kilometers:
my_data['Flight Distance (km)'] = round(my_data['Flight Distance'] * 1.609344, 2)

# Created flight distance groups
def atstumas(eilute):
    if eilute['Flight Distance (km)'] < 500:
        return "Very Short Flight"
    elif eilute['Flight Distance (km)'] <= 1500:
        return "Short Flight"
    elif eilute['Flight Distance (km)'] <= 4000:
        return "Medium-Haul Flight"
    elif eilute['Flight Distance (km)'] > 4000:
        return "Long-Haul Flight"
    else:
        return "N/A"

my_data["Distance Category"] = my_data.apply(atstumas, axis='columns')
my_data

# Created age groups
def amzius(eilute):
    if eilute['Age'] <= 12:
        return "Children"
    elif eilute['Age'] <= 19:
        return "Teenagers"
    elif eilute['Age'] <= 39:
        return "Younger adults"
    elif eilute['Age'] <= 64:
        return "Adults"
    elif eilute['Age'] > 64:
        return "Seniors"
    else:
        return "N/A"

my_data["Age Group"] = my_data.apply(amzius, axis='columns')
my_data

"""# **1. Male and Female Rating Comparison**

### How many ratings from Male and Female passengers?
"""

gender_evaluation = my_data.groupby('Gender')['count'].count().reset_index()

skiltys, text, _ = plt.pie(gender_evaluation['count'], labels=gender_evaluation['Gender'], autopct='%.2f %%', colors = ["lightseagreen","lightsteelblue"])

plt.title('Percentage of ratings submitted by gender', pad=24)

plt.legend(skiltys, gender_evaluation['Gender'], loc='best')
plt.tight_layout()
plt.axis('equal')

plt.show()

"""### Comparison of Male and Female average rating."""

gender_average_eval = my_data.groupby('Gender')['Average Excluding Zeros'].mean().round(2).reset_index()
gender_average_eval

fig, ax = plt.subplots()
bar_container = ax.bar(gender_average_eval['Gender'], gender_average_eval['Average Excluding Zeros'], color=['mediumaquamarine','lightblue'])

ax.set(xlabel='Gender', ylabel='Average rating', title='Male and Female Average Rating', ylim=(0, 5))
ax.bar_label(bar_container, fmt='{:,.2f}')
plt.xticks(gender_average_eval['Gender'])

plt.show()

"""# **2. Flight Class and Rating**

### Do Business Class passengers give better ratings?
"""

travel_class = my_data.groupby('Class')['Average Excluding Zeros'].mean().round(2).reset_index()
travel_class

fig, ax = plt.subplots()
bar_container = ax.bar(travel_class['Class'], travel_class['Average Excluding Zeros'], color="skyblue")

ax.set(xlabel='Class', ylabel='Average Rating', title='Average Rating by Travel Class', ylim=(0, 5))
ax.bar_label(bar_container, fmt='{:,.2f}')

bar_container[0].set_hatch('/')
bar_container[1].set_hatch('|')
bar_container[2].set_hatch('-')

plt.xticks(travel_class['Class'], rotation=45)

plt.show()

"""### To improve business class, it is useful to find out the TOP 10 worst ratings and find in which categories the rating was poor."""

my_data.loc[my_data['Class'] == "Business"
  ].sort_values(by='Average Excluding Zeros', ascending=True).head(10).reset_index()

"""### How much does flight distance affect the rating of business class travelers?"""

my_data.loc[
    my_data['Class'] == "Business"
].groupby('Distance Category')['Average Excluding Zeros'].mean().round(2).reset_index()

"""# **3. Comparison of New and Returning Passengers**

### Of all those who submitted ratings how many are new and how many returning passengers?
"""

customer_type_group = my_data.groupby('Customer Type')['count'].count().reset_index()

customer_type_group

def absolute_value(percents, all_values):
    bendras_sk = int(round(percents / 100. * sum(all_values), 2))
    return f"{percents:.2f}%\n({bendras_sk:d})"

skiltys, texts, _ = plt.pie(customer_type_group['count'], explode=[0, 0.1], autopct=lambda proc: absolute_value(proc, customer_type_group['count']), colors = ["mediumseagreen","teal"])

plt.legend(skiltys, customer_type_group['Customer Type'], loc='best')
plt.tight_layout()
plt.axis('equal')

plt.title('Number of ratings by traveler type')

plt.show()

"""### Do new travelers tend to give better ratings if the flight is very short or short?"""

new_customer_grouped = my_data.loc[
    (my_data['Customer Type'] == 'First-time') & ((my_data['Distance Category'].str[:5] == "Short") | (my_data['Distance Category'] == "Very Short Flight"))
].groupby('Distance Category')['Average Excluding Zeros'].mean().round(2).reset_index()

new_customer_grouped

total_average_rating = my_data['Average Excluding Zeros'].mean().round(2)
total_average_rating

fig, ax = plt.subplots()
bar_container = ax.bar(new_customer_grouped['Distance Category'], new_customer_grouped['Average Excluding Zeros'], color="powderblue")

ax.set(xlabel='Flight Distance', ylabel='Average Rating', title='New Passengers Average Rating by Flight Distance', ylim=(0, 5))
ax.bar_label(bar_container, fmt='{:,.2f}')
plt.xticks(new_customer_grouped['Distance Category'])

ax.axhline(y=total_average_rating, color='blue', linestyle='--', linewidth=1, label=f'Overall average of all ratings: {total_average_rating:.2f}')
ax.legend()
plt.tight_layout()

plt.show()

"""### Are the results different from the ratings of returning travelers?"""

returning_customer_grouped = my_data.loc[
    (my_data['Customer Type'] == 'Returning') & ((my_data['Distance Category'].str[:5] == "Short") | (my_data['Distance Category'] == "Very Short Flight"))
].groupby('Distance Category')['Average Excluding Zeros'].mean().round(2).reset_index()

fig, ax = plt.subplots()
bar_container = ax.bar(returning_customer_grouped['Distance Category'], returning_customer_grouped['Average Excluding Zeros'], color="darkseagreen")

ax.set(xlabel='Flight Distance', ylabel='Average Rating', title='Returning Passengers Average Rating by Flight Distance', ylim=(0, 5))
ax.bar_label(bar_container, fmt='{:,.2f}',rotation=5)
plt.xticks(returning_customer_grouped['Distance Category'])

ax.axhline(y=total_average_rating, color='darkred', linestyle='dotted', linewidth=2, label=f'Overall average of all ratings: {total_average_rating:.2f}')
ax.legend()
plt.tight_layout()

plt.show()

"""# **4. The impact of departure and arrival delays on the ratings**

### Longest departure and arrival delays
"""

top10_late = my_data.sort_values(by=['Departure Delay','Arrival Delay'], ascending=False).head(10).reset_index()
top10_late

"""### How does the average rating of these passengers compare to the overall average?"""

top10_late['title'] = "Passenger no. " + (top10_late.index + 1).astype(str)

fig, ax = plt.subplots()
bar_container = ax.bar(top10_late['title'], top10_late['Average Excluding Zeros'], color="cadetblue")

ax.set(ylabel='Average Rating', title='Average customer rating of TOP 10 delays', ylim=(0, 5))
ax.bar_label(bar_container, fmt='{:,.2f}')
plt.xticks(top10_late['title'], rotation=45, ha='right')

ax.axhline(y=total_average_rating, color='green', linestyle='solid', linewidth=1, label=f'Overall average rating of all passengers: {total_average_rating:.2f}')
ax.legend()
plt.tight_layout()

plt.show()

"""# **5. Ratings and Age Groups**

### Distribution of ratings by age group
"""

age_evaluation = my_data.groupby('Age Group')['count'].count().sort_values(ascending=True).reset_index()

plt.barh(age_evaluation['Age Group'], age_evaluation['count'], color=['skyblue', 'darkturquoise', 'lightblue', 'steelblue', 'deepskyblue'], height=0.8)

plt.title('Number of Ratings by Age Group')
plt.ylabel('Age Group')
plt.xlabel('Count of Ratings')

plt.yticks(age_evaluation['Age Group'])
plt.show()

"""### Distribution of ratings by age category and overall satisfaction."""

age_and_satisfaction = my_data.groupby(['Age Group', 'Satisfaction'])['count'].count().sort_values(ascending=False).reset_index()

age_and_satisfaction

stacked_bar = age_and_satisfaction.pivot_table(index='Age Group', columns='Satisfaction', values='count')

ax = stacked_bar.plot(
    kind='bar',
    stacked=True,
    color=['cadetblue','lightblue'])

plt.title('Number of Ratings by Age Group and Overall Satisfaction')
plt.xlabel('Age Group')
plt.ylabel('Count of Ratings')
plt.xticks(rotation=45, ha='right')

plt.legend(title='Overall Satisfaction', loc='best')

plt.grid(axis='y', linestyle='--', alpha=0.7)

plt.tight_layout()
plt.show()

my_data.groupby('Age Group')['Average Excluding Zeros'].mean().round(2).sort_values().reset_index()

"""# Final Remarks

This analysis primarily focused on the average rating – specifically, whether gender, flight class, passenger type, age group, or flight delays had an impact.

No significant differences were found in the average ratings between men and women. Those traveling in business class, especially for longer distances, tended to give better ratings than those traveling in other flight classes. Also, returning customers gave better ratings than new customers who chose short flights.

Regarding age groups, travelers aged 45-64 were the most satisfied. Additionally, flight delays could have contributed to lower ratings.
"""